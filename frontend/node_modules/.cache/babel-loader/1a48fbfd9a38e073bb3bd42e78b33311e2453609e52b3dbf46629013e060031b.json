{"ast":null,"code":"import React, { useMemo, useImperativeHandle, useLayoutEffect } from 'react';\nimport { useMap } from '../hooks/useMap.js';\nimport { jsx } from 'react/jsx-runtime';\nconst DrawingManagerContext = /*#__PURE__*/React.createContext(undefined);\nfunction useDrawingManagerEvent(target, type, callback) {\n  useLayoutEffect(() => {\n    if (!target || !callback) return;\n    const wrapCallback = function () {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n      if (AbortSignal === undefined) return callback(target);else return callback(target, ...args);\n    };\n\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    target.addListener(type, wrapCallback);\n  }, [callback, target, type]);\n}\n\n/**\r\n * 그리기 관리자 객체를 생성하는 컴포넌트 입니다.\r\n *\r\n * 초기 생성자에 필요한 Props는 최초 렌더링에만 반영을 하고 이후에는 값이 변경되더라도 적용되지 않습니다.\r\n *\r\n * > `on~` 시리즈를 제외한 props는 초기 렌더링 이후 작동 안함\r\n *\r\n * DrawingManager는 이전 Map, Marker, CustomOverlay와 달리 Props를 통해 제어를 하는 것이 아닌 직접 DrawingManager 객체를 이용하여 제어를 해야 합니다.\r\n *\r\n * 이를 위해 ref 객체를 통해 `DrawingManager` 객체를 접근 할 수 있으며, 이를 활용하여 여러 이벤트 처리 및 제어가 가능합니다.\r\n *\r\n * TypeScript 사용자를 위한 `Generic`이 적용되어 있으므로, `ref` 객체에 대한 typing 및 `drawingMode`에 대해 확실하게 정의해야 합니다.\r\n *\r\n * ```tsx\r\n * const Main = () => {\r\n *     const managerRef = useRef<kakao.maps.drawing.DrawingManager<\r\n *       kakao.maps.drawing.OverlayType.POLYLINE\r\n *     >>(null);\r\n *\r\n *     function selectOverlay(type: string) {\r\n *       const manager = managerRef.current;\r\n *       manager.cancel();\r\n *       manager.select(kakao.maps.drawing.OverlayType.POLYLINE);\r\n *     }\r\n *\r\n *     return (\r\n *       <>\r\n *         <Map\r\n *           center={{\r\n *             // 지도의 중심좌표\r\n *             lat: 33.450701,\r\n *             lng: 126.570667,\r\n *           }}\r\n *           style={{\r\n *             width: \"100%\",\r\n *             height: \"450px\",\r\n *           }}\r\n *           level={3} // 지도의 확대 레벨\r\n *         >\r\n *           <DrawingManager\r\n *             ref={managerRef}\r\n *             drawingMode={[\r\n *               kakao.maps.drawing.OverlayType.POLYLINE,\r\n *             ]}\r\n *             guideTooltip={['draw', 'drag', 'edit']}\r\n *             polylineOptions={{\r\n *               draggable: true,\r\n *               removable: true,\r\n *               editable: true\r\n *             }}\r\n *           />\r\n *         </Map>\r\n *         <button onClick={(e) => {\r\n *           selectOverlay('POLYLINE')\r\n *         }}>선</button>\r\n *       </>\r\n *     )\r\n *   }\r\n * ```\r\n *\r\n * > JavaScript 코드 버전\r\n *\r\n * ```jsx live\r\n * function() {\r\n *   const Main = () => {\r\n *     const managerRef = useRef(null);\r\n *\r\n *     function selectOverlay() {\r\n *       const manager = managerRef.current;\r\n *       manager.cancel();\r\n *       manager.select(kakao.maps.drawing.OverlayType.POLYLINE);\r\n *     }\r\n *\r\n *     return (\r\n *       <>\r\n *         <Map\r\n *           center={{\r\n *             // 지도의 중심좌표\r\n *             lat: 33.450701,\r\n *             lng: 126.570667,\r\n *           }}\r\n *           style={{\r\n *             width: \"100%\",\r\n *             height: \"450px\",\r\n *           }}\r\n *           level={3} // 지도의 확대 레벨\r\n *         >\r\n *           <DrawingManager\r\n *             ref={managerRef}\r\n *             drawingMode={[\r\n *               kakao.maps.drawing.OverlayType.POLYLINE,\r\n *             ]}\r\n *             guideTooltip={['draw', 'drag', 'edit']}\r\n *             polylineOptions={{\r\n *               draggable: true,\r\n *               removable: true,\r\n *               editable: true\r\n *             }}\r\n *           />\r\n *         </Map>\r\n *         <button onClick={selectOverlay}>선</button>\r\n *       </>\r\n *     )\r\n *   }\r\n *   return (<Main />)\r\n * }\r\n * ```\r\n */\nconst DrawingManager = /*#__PURE__*/React.forwardRef(function DrawingManager(_ref, ref) {\n  let {\n    arrowOptions,\n    circleOptions,\n    ellipseOptions,\n    markerOptions,\n    polygonOptions,\n    polylineOptions,\n    rectangleOptions,\n    drawingMode,\n    guideTooltip,\n    onSelect,\n    onDrawstart,\n    onDraw,\n    onDrawend,\n    onDrawnext,\n    onCancle,\n    onRemove,\n    onStateChanged,\n    onCreate,\n    children\n  } = _ref;\n  const map = useMap(\"Toolbox\");\n  const drawingManager = useMemo(() => {\n    if (!window.kakao.maps.drawing) {\n      console.warn(\"drawing 라이브러리를 별도 로드 해야 사용 가능합니다. `https://apis.map.kakao.com/web/guide/#loadlibrary`\");\n      return;\n    }\n    return new kakao.maps.drawing.DrawingManager({\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-ignore\n      map,\n      drawingMode,\n      guideTooltip,\n      arrowOptions,\n      circleOptions,\n      ellipseOptions,\n      markerOptions,\n      polygonOptions,\n      polylineOptions,\n      rectangleOptions\n    });\n  },\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  []);\n  useImperativeHandle(ref, () => drawingManager, [drawingManager]);\n  useLayoutEffect(() => {\n    drawingManager && onCreate && onCreate(drawingManager);\n  }, [drawingManager, onCreate]);\n  useDrawingManagerEvent(drawingManager, \"select\", onSelect);\n  useDrawingManagerEvent(drawingManager, \"drawstart\", onDrawstart);\n  useDrawingManagerEvent(drawingManager, \"draw\", onDraw);\n  useDrawingManagerEvent(drawingManager, \"drawend\", onDrawend);\n  useDrawingManagerEvent(drawingManager, \"drawnext\", onDrawnext);\n  useDrawingManagerEvent(drawingManager, \"cancel\", onCancle);\n  useDrawingManagerEvent(drawingManager, \"remove\", onRemove);\n  useDrawingManagerEvent(drawingManager, \"state_changed\", onStateChanged);\n  if (!drawingManager) return null;\n  return /*#__PURE__*/jsx(DrawingManagerContext.Provider, {\n    value: drawingManager,\n    children: children\n  });\n});\nexport { DrawingManager, DrawingManagerContext };","map":{"version":3,"names":["React","useMemo","useImperativeHandle","useLayoutEffect","useMap","jsx","DrawingManagerContext","createContext","undefined","useDrawingManagerEvent","target","type","callback","wrapCallback","_len","arguments","length","args","Array","_key","AbortSignal","addListener","DrawingManager","forwardRef","_ref","ref","arrowOptions","circleOptions","ellipseOptions","markerOptions","polygonOptions","polylineOptions","rectangleOptions","drawingMode","guideTooltip","onSelect","onDrawstart","onDraw","onDrawend","onDrawnext","onCancle","onRemove","onStateChanged","onCreate","children","map","drawingManager","window","kakao","maps","drawing","console","warn","Provider","value"],"sources":["C:/Users/by_95/Desktop/2024/Web_Programming/ReBread/pingpong/frontend/node_modules/react-kakao-maps-sdk/esm/components/DrawingManager.js"],"sourcesContent":["import React, { useMemo, useImperativeHandle, useLayoutEffect } from 'react';\r\nimport { useMap } from '../hooks/useMap.js';\r\nimport { jsx } from 'react/jsx-runtime';\r\n\r\nconst DrawingManagerContext = /*#__PURE__*/React.createContext(undefined);\r\nfunction useDrawingManagerEvent(target, type, callback) {\r\n  useLayoutEffect(() => {\r\n    if (!target || !callback) return;\r\n    const wrapCallback = function () {\r\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\r\n        args[_key] = arguments[_key];\r\n      }\r\n      if (AbortSignal === undefined) return callback(target);else return callback(target, ...args);\r\n    };\r\n\r\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n    // @ts-ignore\r\n    target.addListener(type, wrapCallback);\r\n  }, [callback, target, type]);\r\n}\r\n\r\n/**\r\n * 그리기 관리자 객체를 생성하는 컴포넌트 입니다.\r\n *\r\n * 초기 생성자에 필요한 Props는 최초 렌더링에만 반영을 하고 이후에는 값이 변경되더라도 적용되지 않습니다.\r\n *\r\n * > `on~` 시리즈를 제외한 props는 초기 렌더링 이후 작동 안함\r\n *\r\n * DrawingManager는 이전 Map, Marker, CustomOverlay와 달리 Props를 통해 제어를 하는 것이 아닌 직접 DrawingManager 객체를 이용하여 제어를 해야 합니다.\r\n *\r\n * 이를 위해 ref 객체를 통해 `DrawingManager` 객체를 접근 할 수 있으며, 이를 활용하여 여러 이벤트 처리 및 제어가 가능합니다.\r\n *\r\n * TypeScript 사용자를 위한 `Generic`이 적용되어 있으므로, `ref` 객체에 대한 typing 및 `drawingMode`에 대해 확실하게 정의해야 합니다.\r\n *\r\n * ```tsx\r\n * const Main = () => {\r\n *     const managerRef = useRef<kakao.maps.drawing.DrawingManager<\r\n *       kakao.maps.drawing.OverlayType.POLYLINE\r\n *     >>(null);\r\n *\r\n *     function selectOverlay(type: string) {\r\n *       const manager = managerRef.current;\r\n *       manager.cancel();\r\n *       manager.select(kakao.maps.drawing.OverlayType.POLYLINE);\r\n *     }\r\n *\r\n *     return (\r\n *       <>\r\n *         <Map\r\n *           center={{\r\n *             // 지도의 중심좌표\r\n *             lat: 33.450701,\r\n *             lng: 126.570667,\r\n *           }}\r\n *           style={{\r\n *             width: \"100%\",\r\n *             height: \"450px\",\r\n *           }}\r\n *           level={3} // 지도의 확대 레벨\r\n *         >\r\n *           <DrawingManager\r\n *             ref={managerRef}\r\n *             drawingMode={[\r\n *               kakao.maps.drawing.OverlayType.POLYLINE,\r\n *             ]}\r\n *             guideTooltip={['draw', 'drag', 'edit']}\r\n *             polylineOptions={{\r\n *               draggable: true,\r\n *               removable: true,\r\n *               editable: true\r\n *             }}\r\n *           />\r\n *         </Map>\r\n *         <button onClick={(e) => {\r\n *           selectOverlay('POLYLINE')\r\n *         }}>선</button>\r\n *       </>\r\n *     )\r\n *   }\r\n * ```\r\n *\r\n * > JavaScript 코드 버전\r\n *\r\n * ```jsx live\r\n * function() {\r\n *   const Main = () => {\r\n *     const managerRef = useRef(null);\r\n *\r\n *     function selectOverlay() {\r\n *       const manager = managerRef.current;\r\n *       manager.cancel();\r\n *       manager.select(kakao.maps.drawing.OverlayType.POLYLINE);\r\n *     }\r\n *\r\n *     return (\r\n *       <>\r\n *         <Map\r\n *           center={{\r\n *             // 지도의 중심좌표\r\n *             lat: 33.450701,\r\n *             lng: 126.570667,\r\n *           }}\r\n *           style={{\r\n *             width: \"100%\",\r\n *             height: \"450px\",\r\n *           }}\r\n *           level={3} // 지도의 확대 레벨\r\n *         >\r\n *           <DrawingManager\r\n *             ref={managerRef}\r\n *             drawingMode={[\r\n *               kakao.maps.drawing.OverlayType.POLYLINE,\r\n *             ]}\r\n *             guideTooltip={['draw', 'drag', 'edit']}\r\n *             polylineOptions={{\r\n *               draggable: true,\r\n *               removable: true,\r\n *               editable: true\r\n *             }}\r\n *           />\r\n *         </Map>\r\n *         <button onClick={selectOverlay}>선</button>\r\n *       </>\r\n *     )\r\n *   }\r\n *   return (<Main />)\r\n * }\r\n * ```\r\n */\r\nconst DrawingManager = /*#__PURE__*/React.forwardRef(function DrawingManager(_ref, ref) {\r\n  let {\r\n    arrowOptions,\r\n    circleOptions,\r\n    ellipseOptions,\r\n    markerOptions,\r\n    polygonOptions,\r\n    polylineOptions,\r\n    rectangleOptions,\r\n    drawingMode,\r\n    guideTooltip,\r\n    onSelect,\r\n    onDrawstart,\r\n    onDraw,\r\n    onDrawend,\r\n    onDrawnext,\r\n    onCancle,\r\n    onRemove,\r\n    onStateChanged,\r\n    onCreate,\r\n    children\r\n  } = _ref;\r\n  const map = useMap(\"Toolbox\");\r\n  const drawingManager = useMemo(() => {\r\n    if (!window.kakao.maps.drawing) {\r\n      console.warn(\"drawing 라이브러리를 별도 로드 해야 사용 가능합니다. `https://apis.map.kakao.com/web/guide/#loadlibrary`\");\r\n      return;\r\n    }\r\n    return new kakao.maps.drawing.DrawingManager({\r\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n      // @ts-ignore\r\n      map,\r\n      drawingMode,\r\n      guideTooltip,\r\n      arrowOptions,\r\n      circleOptions,\r\n      ellipseOptions,\r\n      markerOptions,\r\n      polygonOptions,\r\n      polylineOptions,\r\n      rectangleOptions\r\n    });\r\n  },\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  []);\r\n  useImperativeHandle(ref, () => drawingManager, [drawingManager]);\r\n  useLayoutEffect(() => {\r\n    drawingManager && onCreate && onCreate(drawingManager);\r\n  }, [drawingManager, onCreate]);\r\n  useDrawingManagerEvent(drawingManager, \"select\", onSelect);\r\n  useDrawingManagerEvent(drawingManager, \"drawstart\", onDrawstart);\r\n  useDrawingManagerEvent(drawingManager, \"draw\", onDraw);\r\n  useDrawingManagerEvent(drawingManager, \"drawend\", onDrawend);\r\n  useDrawingManagerEvent(drawingManager, \"drawnext\", onDrawnext);\r\n  useDrawingManagerEvent(drawingManager, \"cancel\", onCancle);\r\n  useDrawingManagerEvent(drawingManager, \"remove\", onRemove);\r\n  useDrawingManagerEvent(drawingManager, \"state_changed\", onStateChanged);\r\n  if (!drawingManager) return null;\r\n  return /*#__PURE__*/jsx(DrawingManagerContext.Provider, {\r\n    value: drawingManager,\r\n    children: children\r\n  });\r\n});\r\n\r\nexport { DrawingManager, DrawingManagerContext };\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}