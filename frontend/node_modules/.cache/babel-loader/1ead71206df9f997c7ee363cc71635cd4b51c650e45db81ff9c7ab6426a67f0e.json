{"ast":null,"code":"const defaultOptions = {\n  active: true,\n  breakpoints: {},\n  delay: 4000,\n  jump: false,\n  playOnInit: true,\n  stopOnFocusIn: true,\n  stopOnInteraction: true,\n  stopOnMouseEnter: false,\n  stopOnLastSnap: false,\n  rootNode: null\n};\nfunction Autoplay(userOptions = {}) {\n  let options;\n  let emblaApi;\n  let destroyed;\n  let playing = false;\n  let resume = true;\n  let jump = false;\n  let timer = 0;\n  function init(emblaApiInstance, optionsHandler) {\n    emblaApi = emblaApiInstance;\n    const {\n      mergeOptions,\n      optionsAtMedia\n    } = optionsHandler;\n    const optionsBase = mergeOptions(defaultOptions, Autoplay.globalOptions);\n    const allOptions = mergeOptions(optionsBase, userOptions);\n    options = optionsAtMedia(allOptions);\n    if (emblaApi.scrollSnapList().length <= 1) return;\n    jump = options.jump;\n    destroyed = false;\n    const {\n      eventStore,\n      ownerDocument\n    } = emblaApi.internalEngine();\n    const emblaRoot = emblaApi.rootNode();\n    const root = options.rootNode && options.rootNode(emblaRoot) || emblaRoot;\n    const container = emblaApi.containerNode();\n    emblaApi.on('pointerDown', stopTimer);\n    if (!options.stopOnInteraction) {\n      emblaApi.on('pointerUp', startTimer);\n    }\n    if (options.stopOnMouseEnter) {\n      eventStore.add(root, 'mouseenter', () => {\n        resume = false;\n        stopTimer();\n      });\n      if (!options.stopOnInteraction) {\n        eventStore.add(root, 'mouseleave', () => {\n          resume = true;\n          startTimer();\n        });\n      }\n    }\n    if (options.stopOnFocusIn) {\n      emblaApi.on('slideFocusStart', stopTimer);\n      if (!options.stopOnInteraction) {\n        eventStore.add(container, 'focusout', startTimer);\n      }\n    }\n    eventStore.add(ownerDocument, 'visibilitychange', visibilityChange);\n    if (options.playOnInit && !documentIsHidden()) startTimer();\n  }\n  function destroy() {\n    emblaApi.off('pointerDown', stopTimer).off('pointerUp', startTimer).off('slideFocusStart', stopTimer);\n    stopTimer();\n    destroyed = true;\n    playing = false;\n  }\n  function startTimer() {\n    if (destroyed) return;\n    if (!resume) return;\n    if (!playing) emblaApi.emit('autoplay:play');\n    const {\n      ownerWindow\n    } = emblaApi.internalEngine();\n    ownerWindow.clearInterval(timer);\n    timer = ownerWindow.setInterval(next, options.delay);\n    playing = true;\n  }\n  function stopTimer() {\n    if (destroyed) return;\n    if (playing) emblaApi.emit('autoplay:stop');\n    const {\n      ownerWindow\n    } = emblaApi.internalEngine();\n    ownerWindow.clearInterval(timer);\n    timer = 0;\n    playing = false;\n  }\n  function visibilityChange() {\n    if (documentIsHidden()) {\n      resume = playing;\n      return stopTimer();\n    }\n    if (resume) startTimer();\n  }\n  function documentIsHidden() {\n    const {\n      ownerDocument\n    } = emblaApi.internalEngine();\n    return ownerDocument.visibilityState === 'hidden';\n  }\n  function play(jumpOverride) {\n    if (typeof jumpOverride !== 'undefined') jump = jumpOverride;\n    resume = true;\n    startTimer();\n  }\n  function stop() {\n    if (playing) stopTimer();\n  }\n  function reset() {\n    if (playing) play();\n  }\n  function isPlaying() {\n    return playing;\n  }\n  function next() {\n    const {\n      index\n    } = emblaApi.internalEngine();\n    const nextIndex = index.clone().add(1).get();\n    const lastIndex = emblaApi.scrollSnapList().length - 1;\n    const kill = options.stopOnLastSnap && nextIndex === lastIndex;\n    if (kill) stopTimer();\n    if (emblaApi.canScrollNext()) {\n      emblaApi.scrollNext(jump);\n    } else {\n      emblaApi.scrollTo(0, jump);\n    }\n  }\n  const self = {\n    name: 'autoplay',\n    options: userOptions,\n    init,\n    destroy,\n    play,\n    stop,\n    reset,\n    isPlaying\n  };\n  return self;\n}\nAutoplay.globalOptions = undefined;\nexport { Autoplay as default };","map":{"version":3,"names":["defaultOptions","active","breakpoints","delay","jump","playOnInit","stopOnFocusIn","stopOnInteraction","stopOnMouseEnter","stopOnLastSnap","rootNode","Autoplay","userOptions","options","emblaApi","destroyed","playing","resume","timer","init","emblaApiInstance","optionsHandler","mergeOptions","optionsAtMedia","optionsBase","globalOptions","allOptions","scrollSnapList","length","eventStore","ownerDocument","internalEngine","emblaRoot","root","container","containerNode","on","stopTimer","startTimer","add","visibilityChange","documentIsHidden","destroy","off","emit","ownerWindow","clearInterval","setInterval","next","visibilityState","play","jumpOverride","stop","reset","isPlaying","index","nextIndex","clone","get","lastIndex","kill","canScrollNext","scrollNext","scrollTo","self","name","undefined"],"sources":["C:\\Users\\by_95\\Desktop\\2024\\Web_Programming\\pingpong\\frontend\\node_modules\\embla-carousel-autoplay\\src\\components\\Options.ts","C:\\Users\\by_95\\Desktop\\2024\\Web_Programming\\pingpong\\frontend\\node_modules\\embla-carousel-autoplay\\src\\components\\Autoplay.ts"],"sourcesContent":["import { CreateOptionsType } from 'embla-carousel'\n\nexport type OptionsType = CreateOptionsType<{\n  delay: number\n  jump: boolean\n  playOnInit: boolean\n  stopOnFocusIn: boolean\n  stopOnInteraction: boolean\n  stopOnMouseEnter: boolean\n  stopOnLastSnap: boolean\n  rootNode: ((emblaRoot: HTMLElement) => HTMLElement | null) | null\n}>\n\nexport const defaultOptions: OptionsType = {\n  active: true,\n  breakpoints: {},\n  delay: 4000,\n  jump: false,\n  playOnInit: true,\n  stopOnFocusIn: true,\n  stopOnInteraction: true,\n  stopOnMouseEnter: false,\n  stopOnLastSnap: false,\n  rootNode: null\n}\n","import { OptionsType, defaultOptions } from './Options'\nimport {\n  CreatePluginType,\n  OptionsHandlerType,\n  EmblaCarouselType\n} from 'embla-carousel'\n\ndeclare module 'embla-carousel' {\n  interface EmblaPluginsType {\n    autoplay: AutoplayType\n  }\n\n  interface EmblaEventListType {\n    autoplayPlay: 'autoplay:play'\n    autoplayStop: 'autoplay:stop'\n  }\n}\n\nexport type AutoplayType = CreatePluginType<\n  {\n    play: (jump?: boolean) => void\n    stop: () => void\n    reset: () => void\n    isPlaying: () => boolean\n  },\n  OptionsType\n>\n\nexport type AutoplayOptionsType = AutoplayType['options']\n\nfunction Autoplay(userOptions: AutoplayOptionsType = {}): AutoplayType {\n  let options: OptionsType\n  let emblaApi: EmblaCarouselType\n  let destroyed: boolean\n  let playing = false\n  let resume = true\n  let jump = false\n  let timer = 0\n\n  function init(\n    emblaApiInstance: EmblaCarouselType,\n    optionsHandler: OptionsHandlerType\n  ): void {\n    emblaApi = emblaApiInstance\n\n    const { mergeOptions, optionsAtMedia } = optionsHandler\n    const optionsBase = mergeOptions(defaultOptions, Autoplay.globalOptions)\n    const allOptions = mergeOptions(optionsBase, userOptions)\n    options = optionsAtMedia(allOptions)\n\n    if (emblaApi.scrollSnapList().length <= 1) return\n\n    jump = options.jump\n    destroyed = false\n\n    const { eventStore, ownerDocument } = emblaApi.internalEngine()\n    const emblaRoot = emblaApi.rootNode()\n    const root = (options.rootNode && options.rootNode(emblaRoot)) || emblaRoot\n    const container = emblaApi.containerNode()\n\n    emblaApi.on('pointerDown', stopTimer)\n\n    if (!options.stopOnInteraction) {\n      emblaApi.on('pointerUp', startTimer)\n    }\n\n    if (options.stopOnMouseEnter) {\n      eventStore.add(root, 'mouseenter', () => {\n        resume = false\n        stopTimer()\n      })\n\n      if (!options.stopOnInteraction) {\n        eventStore.add(root, 'mouseleave', () => {\n          resume = true\n          startTimer()\n        })\n      }\n    }\n\n    if (options.stopOnFocusIn) {\n      emblaApi.on('slideFocusStart', stopTimer)\n\n      if (!options.stopOnInteraction) {\n        eventStore.add(container, 'focusout', startTimer)\n      }\n    }\n\n    eventStore.add(ownerDocument, 'visibilitychange', visibilityChange)\n\n    if (options.playOnInit && !documentIsHidden()) startTimer()\n  }\n\n  function destroy(): void {\n    emblaApi\n      .off('pointerDown', stopTimer)\n      .off('pointerUp', startTimer)\n      .off('slideFocusStart', stopTimer)\n    stopTimer()\n    destroyed = true\n    playing = false\n  }\n\n  function startTimer(): void {\n    if (destroyed) return\n    if (!resume) return\n    if (!playing) emblaApi.emit('autoplay:play')\n    const { ownerWindow } = emblaApi.internalEngine()\n    ownerWindow.clearInterval(timer)\n    timer = ownerWindow.setInterval(next, options.delay)\n    playing = true\n  }\n\n  function stopTimer(): void {\n    if (destroyed) return\n    if (playing) emblaApi.emit('autoplay:stop')\n    const { ownerWindow } = emblaApi.internalEngine()\n    ownerWindow.clearInterval(timer)\n    timer = 0\n    playing = false\n  }\n\n  function visibilityChange(): void {\n    if (documentIsHidden()) {\n      resume = playing\n      return stopTimer()\n    }\n\n    if (resume) startTimer()\n  }\n\n  function documentIsHidden(): boolean {\n    const { ownerDocument } = emblaApi.internalEngine()\n    return ownerDocument.visibilityState === 'hidden'\n  }\n\n  function play(jumpOverride?: boolean): void {\n    if (typeof jumpOverride !== 'undefined') jump = jumpOverride\n    resume = true\n    startTimer()\n  }\n\n  function stop(): void {\n    if (playing) stopTimer()\n  }\n\n  function reset(): void {\n    if (playing) play()\n  }\n\n  function isPlaying(): boolean {\n    return playing\n  }\n\n  function next(): void {\n    const { index } = emblaApi.internalEngine()\n    const nextIndex = index.clone().add(1).get()\n    const lastIndex = emblaApi.scrollSnapList().length - 1\n    const kill = options.stopOnLastSnap && nextIndex === lastIndex\n\n    if (kill) stopTimer()\n\n    if (emblaApi.canScrollNext()) {\n      emblaApi.scrollNext(jump)\n    } else {\n      emblaApi.scrollTo(0, jump)\n    }\n  }\n\n  const self: AutoplayType = {\n    name: 'autoplay',\n    options: userOptions,\n    init,\n    destroy,\n    play,\n    stop,\n    reset,\n    isPlaying\n  }\n  return self\n}\n\ndeclare namespace Autoplay {\n  let globalOptions: AutoplayOptionsType | undefined\n}\n\nAutoplay.globalOptions = undefined\n\nexport default Autoplay\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}